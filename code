#include<bits/stdc++.h>

#include<vector>

#include<stack>

#include<set>

#include <fstream>

#define NIL - 1

using namespace std;
//Written by MERLAND ISMAIL "function to check the existence of an element in the stack
bool isitThere(stack < int > s, int x) {
  while (!s.empty() && s.top() != x) s.pop();
  if (!s.empty()) return true;
  return false;

}

//Written by Arin Kutey & QAMAR Jaboor "GABOW DFS"
void gabow_dfs(vector < vector < int > > g, int v, int & dfscounter, string * state, int * dfsnum, int * comp, stack < int > ostack, stack < int > rstack) {
  state[v] = "active";
  dfsnum[v] = dfscounter;
  dfscounter++;
  ostack.push(v);
  rstack.push(v);


  for (int i = 0; i < g[v].size(); i++) {
    int w = g[v][i];
    if (state[w] == "new")
      gabow_dfs(g,w, dfscounter, state, dfsnum, comp, ostack, rstack);
    else {
      if (isitThere(ostack, w))
        while (dfsnum[w] < dfsnum[rstack.top()]) {
          rstack.pop();
        }
  }}

  state[v] = "finished";
  if (v == rstack.top())
    rstack.pop();

    int w;
  while (true) {
    w = rstack.top();
    rstack.pop();
    comp[w] = v;
    if (w == v) {
      break;
    }
  }
}

//Written by HELEN AL HAYEK & BATOOL HAMDAN  "strongly connected test"
bool Gabow(vector < vector < int > > graph, int n) {
  //"init"
  int dfscounter = 1;
  string * state = new string[n];
  int * dfsnum = new int[n];
  int * comp = new int[n];
  stack < int > ostack;
  stack < int > rstack;
  for (int i = 0; i < n; i++) {
    state[i] = "new";
    dfsnum[i] = -1;
    comp[i] = -1;
  }
  //end of init

  //"start of cheriyan mehlhorn gabow"
  for (int i = 0; i < n; i++)
    if (state[i] == "new") gabow_dfs(graph, i, dfscounter, state, dfsnum, comp, ostack, rstack);
  //is it strongly connected ?
  int t = comp[0];
  for (int i = 0; i < n; i++)
    if (comp[i] != t) {
      cout << "comp\n";
      return false;
    }
  return true;
}
//Written by ALISSAR KAMAL
void APUtil(vector < vector < int > > g, int u, bool * visited, int * disc, int * low, int * parent, bool * ap) {
  static int time = 0;
  int children = 0;
  visited[u] = true;
  disc[u] = low[u] = ++time;
  for (int i = 0; i < g[u].size(); ++i) {
    int v = i;
    if (!visited[v]) {
      children++;
      parent[v] = u;
      APUtil(g, v, visited, disc, low, parent, ap);
      low[u] = min(low[u], low[v]);
      if (parent[u] == NIL && children > 1) ap[u] = true;
      if (parent[u] != NIL && low[v] >= disc[u]) ap[u] = true;
    } else if (v != parent[u]) low[u] = min(low[u], disc[v]);
  }
}

//Written by AYA AHMAD "articolation point test"
bool AP(vector < vector < int > >  g, int v) {
  cout << "AP\n";
  bool * visited = new bool[v];
  int * disc = new int[v];
  int * low = new int[v];
  int * parent = new int[v];
  bool * ap = new bool[v];
  for (int i = 0; i < v; i++) {
    parent[i] = NIL;
    visited[i] = false;
    ap[i] = false;
  }
  for (int i = 0; i < v; i++)
    if (visited[i] == false) APUtil(g, i, visited, disc, low, parent, ap);
  for (int i = 0; i < v; i++)
    if (ap[i] == true) return false;
  return true;
}
//Written by HUDA Abdul Wahid
//"strongly biconnected test"
bool biconnected(vector < vector < int > >  g, int n) {
  //is it strongly connected ?
  if (!Gabow(g, n)) //its not strongly connected!
    return false;
  else //it is strongly connected //but is it has any AP ?
  { //the underlying graph
    for (int i = 0; i < n; i++) {
      for (int j: g[i]) {
        g[i].push_back(j);
        g[j].push_back(i);
      }
    }
    //now g is undirected graph(underlying graph)
    //test if its have AP
    if (AP(g, n)) return false; //it has AP
    else return true; //it has not AP
  }
}
//Written by NOOR AL EMAN ZREIK & FATIMA HARIR
bool IS_2_vertex_strongly_biconnected(vector < vector < int > > g, int n) {
  if (n < 3) return false;
  for (int i = 0; i < n; i++) {
    vector < int > x = g[i];
    g[i].clear();
    if (!biconnected(g, n - 1)) return false;
    g.push_back(x);

  }
  return true;

}

int main() {
  string snapgraph[6]={"ego_Gplus.txt","musae_github.txt","musae_facebook.txt","gemsec_Deezer.txt","congress_Twitter.txt","ego_Facebook.txt"};

  for(int j=0;j<6;j++){

  int n, m;
  cout << "Enter the number of vertices: ";
  cin >> n;
  cout << "Enter the number of edges: ";
  cin >> m;


  vector < vector < int >> graph(n);

  ifstream file(snapgraph[j]);

  for (int i = 0; i < m; i++) {
    int u, v;
    cout << "Enter edge " << i + 1 << ": ";
    file >> u >> v;
    graph[u].push_back(v);
  }


  if (IS_2_vertex_strongly_biconnected(graph, n)) cout << "2_vertex_strongly_biconnected\n";
  else cout << "not 2_vertex_strongly_biconnected\n";

  file.close();}
  return 0;
}
